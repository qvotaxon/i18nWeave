name: Release

on:
  workflow_run:
    workflows: ['Build & Test']
    branches: [main, 'release/**']
    types:
      - completed

permissions:
  contents: write
  id-token: write
  attestations: write
  pull-requests: write

jobs:
  release:
    name: Release
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_KEY }}
          release-type: node

      - name: Set prerelease flag
        id: prerelease
        run: |
          echo "IS_PRERELEASE=${{ steps.release.outputs.pr != '' }}" >> $GITHUB_OUTPUT

      - name: Set version
        id: version
        run: |
          VERSION=${{ steps.release.outputs.tag_name }}
          if [ "${{ steps.prerelease.outputs.IS_PRERELEASE }}" == "true" ]; then
            VERSION="${VERSION}-pre"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create npm dependencies directory
        run: mkdir -p .npm

      - name: Cache npm dependencies
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        uses: actions/cache@v4
        with:
          path: .npm/
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        run: npm install

      - name: Update package.json version
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        run: |
          npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version

      - name: Create extension package
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        run: npx vsce package -o i18nWeave-vscode-${{ steps.version.outputs.VERSION }}.vsix

      - name: Upload Release Artifact to GitHub
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release.outputs.tag_name }} i18nWeave-vscode-${{ steps.version.outputs.VERSION }}.vsix
          gh release edit ${{ steps.release.outputs.tag_name }} --prerelease=${{ steps.prerelease.outputs.IS_PRERELEASE }}

      - name: Publish VS Code Extension
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        uses: HaaLeo/publish-vscode-extension@v1.6.2
        with:
          pat: ${{ secrets.VSCE_PAT }}
          registryUrl: https://marketplace.visualstudio.com
          preRelease: ${{ steps.prerelease.outputs.IS_PRERELEASE }}

      - name: Create Sentry release
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: i18nweave
          SENTRY_PROJECT: i18nweave-vscode-r3
        with:
          version: ${{ steps.version.outputs.VERSION }}

      - name: Attest Build Provenance
        if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
        uses: actions/attest-build-provenance@v1.3.1
        with:
          subject-path: i18nWeave-vscode-${{ steps.version.outputs.VERSION }}.vsix

    #   - name: Generate SBOM
    #     if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
    #     uses: anchore/sbom-action@v0
    #     with:
    #       path: 'out'
    #       format: 'spdx-json'
    #       output-file: 'sbom.spdx.json'

    #   - name: Attest SBOM
    #     if: ${{ steps.release.outputs.release_created || steps.prerelease.outputs.IS_PRERELEASE == 'true' }}
    #     uses: actions/attest-sbom@v1
    #     with:
    #       subject-path: '${{ github.workspace }}/out'
    #       sbom-path: 'sbom.spdx.json'
